
#include "lists.h"


/* #FUNC: new_node
 * 
 * Create a new empty node of specified or default size !!
 * 
 *
 * (yet another) Lists management library - by Antonio Dell'elce
 *
 */

#ifndef LISTS_H
#define LISTS_H 1

/* includes */

#include <stdlib.h>
#include <string.h>


/* generic defines */

#ifndef TRUE
#define TRUE 0
#endif

#ifndef FALSE
#define FALSE 1
#endif

#ifndef DEFAULT_SEGSIZE
#define DEFAULT_SEGSIZE 32
#endif

/* simple node */

typedef struct __node_t
{
  struct __node_t  *next;
  struct __node_t  *prev;
  void             *head;
#ifdef SEGMENTED_LISTS
  int               used;      /* in a segmented list we need to know if node is used or not */
  int               segslotid; /* */
  void		   *segment;   /* segments which holds this node... */
#endif
  int               nodesize;
  int              (*del_handler)(struct __node_t *);
#ifdef HAVE_NODE_NODEID
  int               nodeid;
#endif
#ifdef HAVE_ANYTYPE
  anytype_t         data;
#endif
} node_t;

/* list */

typedef struct __list_t
{
  struct __node_t   *first;
  struct __node_t   *last;
  struct __node_t   *current;                                /* if browsing a list  */
  int                lastmsg;                                /* for searching       */
  struct __node_t   *lastsearch;                             /* for searching       */
  int              (*node_del_handler)(struct __node_t *);
#ifdef SEGMENTED_LISTS
  int               segsize;  /* number of node in a single segment */
  void		   *firstsegment;
#endif
  unsigned long     defaultnodesize;
  unsigned long     nodecnt;
} list_t;

#ifdef SEGMENTED_LISTS

typedef struct __segmented_list_t
{
  int               segitems;
  int               segfreeitems; 
  node_t            segnodes[];
} listsegment_t;

#endif

/* Protos */

list_t     *new_list (int listsize, int defaultnodesize);
node_t     *new_node (list_t *list, int nodesize);
int         add_head (list_t *list, node_t *node);
int         add_tail (list_t *list, node_t *newnode);
node_t     *add_empty_tail (list_t *list);
int         add_node_after (list_t *list, node_t *location, node_t *newnode);
int         add_tail (list_t *list, node_t *newnode);
int         del_tail (list_t *list);
int         del_node (list_t *list, node_t *node);
int         del_all_list (list_t *list);
int         del_list (list_t *list, int freenode);
int         scan_list (list_t *list, int (*scan_handler) (list_t *list, node_t *node, 
							void *searchdata), void *searchdata);

/* temp definitions (?) */

#ifndef SEGMENTED_LISTS
#define     free_node(x) free(x)
#else
#define     free_node(x) _seg_free_node(x)

int	    _seg_free_node(node_t *node);

#endif

#define     free_list(x) free(x)

#endif /* LISTS_H */


#ifndef SEGMENTED_LISTS

node_t *
new_node (list_t *holder, int nodesize) /* holder is optional!!! */
{
  node_t *node;

  if (nodesize < sizeof(node_t))
    {
      nodesize = sizeof(node_t);
    }

  node = malloc (nodesize);

  if (!node)
    {
      return 0;
    }
  else
    {
      /* Some init */
      
      memset(node, 0, nodesize);

      node->nodesize = nodesize;

      /* done */

      return node;
    }
}

#else

node_t *
new_node (list_t *holder, int nodesize) /* holder is optional!!! */
{
  listsegment_t  *Segment = holder->firstsegment;
  unsigned long   SegSize;
  node_t         *Node = 0;

  /* if there is no segment allocate it... */

  if (!Segment)
    {
      SegSize = sizeof(listsegment_t) + (nodesize * holder->segsize);
      Segment = malloc (SegSize);

      /* malloc() sanity test */
 
      if (!Segment) return 0; /* malloc() failed! */
    
      /* clean-up allocated space... */
 
      memset (Segment, 0, SegSize);

      /* set attributes of the new segment */

      Segment->segitems = Segment->segfreeitems = holder->segsize;
      Segment->segfirstfree = 1;

      /* List will use this segment.... */

      holder->firstsegment = Segment;

      /* set node ... */

      Node = &Segment->segnodes[0]; 

      Node->nodesize = nodesize;
      Node->used     = TRUE;
     
      return Node; 
   }
 else
   {
     /* find an unreserved node... */

#warning "add_node: this is complete..."

     int Cnt = 0;

     Segment = holder->firstsegment;

     while (Cnt !=  holder->segsize)
       {
         /* */
         if (Segment->segfreeitems)
         {}
          
       }

   }


}

#endif
